import uuid
import json

# –ò—Å–∫–ª—é—á–µ–Ω–∏—è
class AccountExistsError(Exception):
    pass

class InsufficientFundsError(Exception):
    pass

class UnauthorizedAccessError(Exception):
    pass

# –ö–ª–∞—Å—Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞
class Account:
    def __init__(self, currency):
        self.currency = currency
        self.balance = 0.0
        self.id = str(uuid.uuid4())

    def deposit(self, amount):
        self.balance += amount

    def withdraw(self, amount):
        if amount > self.balance:
            raise InsufficientFundsError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.")
        self.balance -= amount

# –ö–ª–∞—Å—Å –∫—Ä–µ–¥–∏—Ç–∞
class Credit:
    def __init__(self, amount, currency, interest_rate):
        self.amount = amount
        self.currency = currency
        self.interest_rate = interest_rate
        self.remaining = amount * (1 + interest_rate)
        self.id = str(uuid.uuid4())

    def repay(self, payment):
        if payment > self.remaining:
            raise ValueError("–ü–ª–∞—Ç—ë–∂ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –ø–æ –∫—Ä–µ–¥–∏—Ç—É.")
        self.remaining -= payment

    def get_summary(self):
        return {
            "ID –∫—Ä–µ–¥–∏—Ç–∞": self.id,
            "–í–∞–ª—é—Ç–∞": self.currency,
            "–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞": self.amount,
            "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞": self.interest_rate,
            "–û—Å—Ç–∞—Ç–æ–∫ –¥–æ–ª–≥–∞": self.remaining
        }

# –ö–ª–∞—Å—Å –∫–ª–∏–µ–Ω—Ç–∞
class Client:
    def __init__(self, name):
        self.name = name
        self.id = str(uuid.uuid4())
        self.accounts = {}  # currency -> Account
        self.credits = []   # —Å–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤

    def open_account(self, currency):
        if currency in self.accounts:
            raise AccountExistsError("–°—á–µ—Ç –≤ —ç—Ç–æ–π –≤–∞–ª—é—Ç–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        self.accounts[currency] = Account(currency)

    def close_account(self, currency):
        if currency not in self.accounts:
            raise ValueError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        del self.accounts[currency]

    def get_account(self, currency):
        return self.accounts.get(currency)

    def open_credit(self, amount, currency, interest_rate):
        credit = Credit(amount, currency, interest_rate)
        self.credits.append(credit)
        return credit

    def repay_credit(self, credit_id, amount):
        for credit in self.credits:
            if credit.id == credit_id:
                credit.repay(amount)
                return
        raise ValueError("–ö—Ä–µ–¥–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    def get_credit_summary(self):
        return [credit.get_summary() for credit in self.credits]

    def get_summary(self):
        total = sum(acc.balance for acc in self.accounts.values())
        return {
            "ID –∫–ª–∏–µ–Ω—Ç–∞": self.id,
            "–ò–º—è": self.name,
            "–°—á–µ—Ç–∞": {
                cur: acc.balance for cur, acc in self.accounts.items()
            },
            "–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å": total
        }

# –ö–ª–∞—Å—Å –±–∞–Ω–∫–∞
class Bank:
    def __init__(self):
        self.clients = {}  # id -> Client

    def register_client(self, name):
        client = Client(name)
        self.clients[client.id] = client
        return client

    def get_client(self, client_id):
        return self.clients.get(client_id)

    def transfer(self, from_client, from_currency, to_client, to_currency, amount):
        from_acc = from_client.get_account(from_currency)
        to_acc = to_client.get_account(to_currency)
        if not from_acc or not to_acc:
            raise ValueError("–û–¥–∏–Ω –∏–∑ —Å—á–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        from_acc.withdraw(amount)
        to_acc.deposit(amount)

# –¢–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    bank = Bank()
    print("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–∞–Ω–∫–æ–≤—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É!")

    while True:
        print("\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        print("2. –í–æ–π—Ç–∏ –ø–æ ID")
        print("0. –í—ã—Ö–æ–¥")
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: ")
            client = bank.register_client(name)
            print(f"–ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –í–∞—à ID: {client.id}")

        elif choice == "2":
            client_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID: ")
            client = bank.get_client(client_id)
            if not client:
                print("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                continue

            while True:
                print(f"\n–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {client.name}!")
                print("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
                print("2. –í—ã–ø–∏—Å–∫–∞ –ø–æ —Å—á–µ—Ç–∞–º (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª)")
                print("3. –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç")
                print("4. –ó–∞–∫—Ä—ã—Ç—å —Å—á–µ—Ç")
                print("5. –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç")
                print("6. –°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞")
                print("7. –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏")
                print("8. –û—Ç–∫—Ä—ã—Ç—å –∫—Ä–µ–¥–∏—Ç")
                print("9. –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
                print("10. –í—ã–ø–∏—Å–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª)")
                print("0. –í—ã–π—Ç–∏")
                sub_choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

                if sub_choice == "1":
                    summary = client.get_summary()
                    print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:")
                    print(f"–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {summary['–ò–º—è']}")
                    print(f"ID –∫–ª–∏–µ–Ω—Ç–∞: {summary['ID –∫–ª–∏–µ–Ω—Ç–∞']}")
                    print("–°—á–µ—Ç–∞:")
                    for currency, balance in sorted(summary["–°—á–µ—Ç–∞"].items()):
                        print(f"  {currency}: {balance:.2f}")
                    print(f"–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å: {summary['–°—É–º–º–∞—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å']:.2f}")

                elif sub_choice == "2":
                    summary = client.get_summary()
                    filename = f"{client.id}_summary.json"
                    with open(filename, "w", encoding="utf-8") as f:
                        json.dump(summary, f, indent=4, ensure_ascii=False)
                    print(f"–í—ã–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª {filename}")

                elif sub_choice == "3":
                    currency = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É: ")
                    try:
                        client.open_account(currency)
                        print("–°—á–µ—Ç –æ—Ç–∫—Ä—ã—Ç.")
                    except AccountExistsError as e:
                        print(e)

                elif sub_choice == "4":
                    currency = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É: ")
                    try:
                        client.close_account(currency)
                        print("–°—á–µ—Ç –∑–∞–∫—Ä—ã—Ç.")
                    except ValueError as e:
                        print(e)

                elif sub_choice == "5":
                    currency = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É: ")
                    amount = float(input("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: "))
                    acc = client.get_account(currency)
                    if acc:
                        acc.deposit(amount)
                        print("–°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω.")
                    else:
                        print("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                elif sub_choice == "6":
                    currency = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É: ")
                    amount = float(input("–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è: "))
                    acc = client.get_account(currency)
                    if acc:
                        try:
                            acc.withdraw(amount)
                            print("–°–Ω—è—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
                        except InsufficientFundsError as e:
                            print(e)
                    else:
                        print("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

                elif sub_choice == "7":
                    to_id = input("ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ")
                    to_client = bank.get_client(to_id)
                    if not to_client:
                        print("–ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        continue
                    from_currency = input("–í–∞—à–∞ –≤–∞–ª—é—Ç–∞: ")
                    to_currency = input("–í–∞–ª—é—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ")
                    amount = float(input("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: "))
                    try:
                        bank.transfer(client, from_currency, to_client, to_currency, amount)
                        print("–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
                    except Exception as e:
                        print(e)

                elif sub_choice == "8":
                    currency = input("–í–∞–ª—é—Ç–∞ –∫—Ä–µ–¥–∏—Ç–∞: ")
                    amount = float(input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞: "))
                    rate = float(input("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.1 –¥–ª—è 10%): "))
                    credit = client.open_credit(amount, currency, rate)
                    print(f"–ö—Ä–µ–¥–∏—Ç –æ—Ç–∫—Ä—ã—Ç. ID –∫—Ä–µ–¥–∏—Ç–∞: {credit.id}")

                elif sub_choice == "9":
                    credit_id = input("ID –∫—Ä–µ–¥–∏—Ç–∞: ")
                    amount = float(input("–°—É–º–º–∞ –ø–æ–≥–∞—à–µ–Ω–∏—è: "))
                    try:
                        client.repay_credit(credit_id, amount)
                        print("–ü–æ–≥–∞—à–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
                    except Exception as e:
                        print(e)

                elif sub_choice == "10":
                    credits = client.get_credit_summary()
                    filename = f"{client.id}_credits.json"
                    with open(filename, "w", encoding="utf-8") as f:
                        json.dump(credits, f, indent=4, ensure_ascii=False)
                    print(f"–í—ã–ø–∏—Å–∫–∞ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª {filename}")

                elif sub_choice == "0":
                    break

        elif choice == "0":
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

if __name__ == "__main__":
    main()